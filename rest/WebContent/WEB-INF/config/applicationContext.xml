<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-lazy-init="false">

	<context:component-scan base-package="com.xy">
		<!--将@Controller的注解排除掉 -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/config/jdbc.properties</value>
			</list>
		</property>
	</bean>
	<!-- <bean id="memcachedPool" class="com.danga.MemCached.SockIOPool" factory-method="getInstance" 
		init-method="initialize" destroy-method="shutDown"> <constructor-arg><value>memCachedPool</value></constructor-arg> 
		<property name="servers"><list><value>${memcache.server}</value></list></property> 
		<property name="weights"><list><value>${memcache.weights}</value></list></property> 
		<property name="initConn"><value>${memcache.initConn}</value></property> 
		<property name="minConn"><value>${memcache.minConn}</value></property> <property 
		name="maxConn"><value>${memcache.maxConn}</value></property> <property name="maintSleep"><value>${memcache.maintSleep}</value></property> 
		<property name="nagle"><value>${memcache.nagle}</value></property> <property 
		name="socketTO"><value>${memcache.socketTO}</value></property> </bean> <bean 
		id="memCacheClient" class="com.danga.MemCached.MemCachedClient"> <constructor-arg><value>memCachedPool</value></constructor-arg> 
		</bean> -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<property name="minPoolSize" value="${c3p0.minPoolSize}" />
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
		<property name="testConnectionOnCheckin" value="${c3p0.testConnectionOnCheckin}" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="com.xy.admx.common.hibernate.AutoBindProjNamingStrategy">
				<property name="include">
					<list>
						<value>Files</value>
						<value>AppUser</value>
						<value>AppRole</value>
						<value>ApiAccess</value>
					</list>
				</property>
			</bean>
		</property>
		<property name="entityInterceptor">
			<bean class="com.xy.admx.common.hibernate.AutoBindProjInterceptor"></bean>
		</property>
		
		<property name="mappingJarLocations">
			<list>
				<value>WEB-INF/lib/vmes-entity.jar</value>
			</list>
		</property>


		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.connection.release_mode">${hibernate.connection.release_mode}</prop>
				<prop key="hibernate.connection.isolation">4</prop>
				<prop key="hibernate.format_sql">${hibernate.show_sql}</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->


				<!-- 二级缓存 -->
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.redis.hibernate4.SingletonRedisRegionFactory</prop>
				<prop key="hibernate.cache.use_second_level_cache">false</prop><!-- 开启二级缓存 --> 
				<!-- 启动"查询缓存"如果想缓存使用findall()、list()、Iterator()、createCriteria()、createQuery()等方法获得的数据结果集,必须配置此项-->
				<prop key="hibernate.cache.use_query_cache">false</prop> 
				<prop key="hibernate.cache.region_prefix">admx_hi_</prop>  
                <prop key="hibernate.cache.provider_configuration_file_resource_path">hibernate-redis.properties</prop>  
			</props>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>

	<aop:config expose-proxy="true">
		<!-- 只对业务逻辑层实施事务 -->
		<aop:pointcut id="txPointcut"
			expression="execution(* com.xy.admx.service..*.*(..))" />
		<!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />
	</aop:config>

	<bean id="commonFilter" class="com.xy.admx.filter.CommonFilter"></bean>
</beans>